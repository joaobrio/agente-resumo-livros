#!/usr/bin/env python3
"""
Formatador Avan√ßado de Transcri√ß√µes para Markdown v2
Aplica boas pr√°ticas de formata√ß√£o nas transcri√ß√µes de livros
"""

import re
import os
from pathlib import Path
from typing import List, Tuple, Dict
import unicodedata

class TranscricaoFormatterV2:
    """Formata transcri√ß√µes seguindo boas pr√°ticas de Markdown"""
    
    def __init__(self):
        self.estrutura_livro = {
            'titulo': '',
            'autor': '',
            'partes': {},
            'capitulos': {},
            'secoes': {}
        }
        self.pagina_atual = 0
        
    def limpar_texto(self, texto: str) -> str:
        """Remove caracteres indesejados e normaliza espa√ßos"""
        # Normalizar unicode
        texto = unicodedata.normalize('NFKD', texto)
        
        # Remover m√∫ltiplos espa√ßos
        texto = re.sub(r'\s+', ' ', texto)
        
        # Remover espa√ßos no in√≠cio e fim
        texto = texto.strip()
        
        return texto
        
    def detectar_tipo_conteudo(self, linha: str) -> Tuple[str, str]:
        """
        Detecta o tipo de conte√∫do da linha
        Retorna: (tipo, texto_limpo)
        """
        linha_limpa = self.limpar_texto(linha)
        
        # Ignorar linhas vazias ou muito curtas
        if not linha_limpa or len(linha_limpa) < 2:
            return 'vazio', ''
            
        # Padr√µes espec√≠ficos do livro
        patterns = {
            # Estrutura principal
            'parte': (r'^PARTE\s+(UM|DOIS|TR√äS|QUATRO|CINCO|I|II|III|IV|V)', '##'),
            'titulo_parte': (r'^(A base|O m√©todo|A mudan√ßa)', '###'),
            'subtitulo_parte': (r'^(Entendendo|As quatro|Fazendo)', '####'),
            
            # Cap√≠tulos
            'capitulo': (r'^Cap√≠tulo\s+\d+', '##'),
            'titulo_capitulo': (r'^(Onde tudo come√ßou|O que √© um Segundo C√©rebro|Como funciona)', '###'),
            
            # Se√ß√µes
            'secao': (r'^[A-Z][a-z\s]+:$', '###'),
            'subsecao': (r'^[A-Z][a-z\s]+\s+[a-z]+.*:$', '####'),
            
            # Elementos especiais
            'citacao': (r'^[""].*[""].*[‚Äì‚Äî]\s*\w+', '>'),
            'nota_rodape': (r'^\*\s+.+', '_Nota:_'),
            'lista_numerada': (r'^\d+[\.\)]\s+', ''),
            'lista_bullet': (r'^[‚Ä¢¬∑‚ñ™‚ñ´‚ó¶‚Ä£‚ÅÉ]\s+', '-'),
            
            # Metadados
            'sumario': (r'^SUM√ÅRIO$', '## Sum√°rio'),
            'introducao': (r'^INTRODU√á√ÉO$|^Introdu√ß√£o$', '## Introdu√ß√£o'),
            'referencias': (r'^(Notas|Refer√™ncias|Bibliografia)$', '## $1'),
        }
        
        for tipo, (pattern, prefixo) in patterns.items():
            match = re.match(pattern, linha_limpa, re.IGNORECASE)
            if match:
                if prefixo and not prefixo.startswith('$'):
                    return tipo, f"{prefixo} {linha_limpa}"
                elif prefixo.startswith('$'):
                    # Substitui√ß√£o com grupo capturado
                    return tipo, re.sub(pattern, prefixo, linha_limpa, flags=re.IGNORECASE)
                else:
                    return tipo, linha_limpa
                    
        # Se n√£o corresponder a nenhum padr√£o espec√≠fico
        if re.match(r'^[A-Z\s]+$', linha_limpa) and len(linha_limpa) > 5:
            # Provavelmente um t√≠tulo em mai√∫sculas
            return 'titulo_maiusculo', f"### {linha_limpa.title()}"
            
        # Par√°grafo normal
        return 'paragrafo', linha_limpa
        
    def processar_paginas(self, linhas: List[str]) -> List[str]:
        """Processa as linhas removendo marcadores de p√°gina e organizando conte√∫do"""
        
        conteudo_processado = []
        buffer_paragrafo = []
        em_citacao = False
        pulando_cabecalho = True
        
        for i, linha in enumerate(linhas):
            # Detectar e pular p√°ginas iniciais (capa, ficha catalogr√°fica, etc.)
            if pulando_cabecalho:
                if any(palavra in linha.upper() for palavra in ['SUM√ÅRIO', 'INTRODU√á√ÉO', 'CAP√çTULO']):
                    pulando_cabecalho = False
                elif self.pagina_atual < 10:
                    continue
                    
            # Ignorar marcadores de p√°gina
            if linha.strip().startswith('## P√°gina') or linha.strip() == '---':
                self.pagina_atual += 1
                continue
                
            # Ignorar cabe√ßalhos/rodap√©s repetitivos
            if self.eh_cabecalho_rodape(linha):
                continue
                
            tipo, texto_formatado = self.detectar_tipo_conteudo(linha)
            
            # Processar buffer de par√°grafo quando encontrar novo elemento estrutural
            if tipo in ['parte', 'capitulo', 'secao', 'titulo_maiusculo'] and buffer_paragrafo:
                paragrafo_completo = ' '.join(buffer_paragrafo)
                if len(paragrafo_completo) > 20:  # Ignorar par√°grafos muito curtos
                    conteudo_processado.append(paragrafo_completo + '\n')
                buffer_paragrafo = []
                # Adicionar linha em branco antes de t√≠tulos
                conteudo_processado.append('\n')
                
            # Processar conte√∫do baseado no tipo
            if tipo == 'vazio':
                if buffer_paragrafo:
                    paragrafo_completo = ' '.join(buffer_paragrafo)
                    if len(paragrafo_completo) > 20:
                        conteudo_processado.append(paragrafo_completo + '\n\n')
                    buffer_paragrafo = []
            elif tipo == 'paragrafo' and texto_formatado:
                buffer_paragrafo.append(texto_formatado)
            elif tipo == 'citacao':
                if buffer_paragrafo:
                    paragrafo_completo = ' '.join(buffer_paragrafo)
                    if paragrafo_completo:
                        conteudo_processado.append(paragrafo_completo + '\n\n')
                    buffer_paragrafo = []
                conteudo_processado.append(f"\n{texto_formatado}\n\n")
            else:
                if texto_formatado:
                    conteudo_processado.append(texto_formatado + '\n')
                    
        # Processar √∫ltimo par√°grafo
        if buffer_paragrafo:
            paragrafo_completo = ' '.join(buffer_paragrafo)
            if len(paragrafo_completo) > 20:
                conteudo_processado.append(paragrafo_completo + '\n')
                
        return conteudo_processado
        
    def eh_cabecalho_rodape(self, linha: str) -> bool:
        """Detecta se a linha √© um cabe√ßalho ou rodap√© repetitivo"""
        linha_limpa = linha.strip().lower()
        
        padroes_ignorar = [
            r'^\d+$',  # Apenas n√∫meros (p√°ginas)
            r'^criando um segundo c√©rebro',  # T√≠tulo do livro repetido
            r'^tiago forte',  # Nome do autor repetido
            r'copyright',
            r'todos os direitos',
            r'^cap√≠tulo \d+$',  # Apenas "Cap√≠tulo X" sem t√≠tulo
        ]
        
        for padrao in padroes_ignorar:
            if re.search(padrao, linha_limpa):
                return True
                
        return False
        
    def criar_indice(self, conteudo: List[str]) -> str:
        """Cria um √≠ndice/sum√°rio baseado nos t√≠tulos encontrados"""
        indice = ["## √çndice\n"]
        
        for linha in conteudo:
            if linha.startswith('## ') and not linha.startswith('## √çndice'):
                # Parte ou Cap√≠tulo
                titulo = linha.replace('##', '').strip()
                indice.append(f"- **{titulo}**")
            elif linha.startswith('### '):
                # Se√ß√£o
                titulo = linha.replace('###', '').strip()
                indice.append(f"  - {titulo}")
                
        if len(indice) > 1:
            return '\n'.join(indice) + '\n\n---\n\n'
        return ''
        
    def formatar_arquivo(self, caminho_entrada: str, caminho_saida: str):
        """Processa e formata um arquivo de transcri√ß√£o"""
        
        print(f"üìñ Lendo arquivo: {Path(caminho_entrada).name}")
        
        with open(caminho_entrada, 'r', encoding='utf-8') as f:
            linhas = f.readlines()
            
        # Processar conte√∫do
        conteudo_processado = self.processar_paginas(linhas)
        
        # Criar √≠ndice se houver estrutura suficiente
        indice = self.criar_indice(conteudo_processado)
        
        # Montar documento final
        documento_final = []
        
        # Adicionar cabe√ßalho
        documento_final.append(self.gerar_cabecalho(caminho_entrada))
        
        # Adicionar √≠ndice se existir
        if indice:
            documento_final.append(indice)
            
        # Adicionar conte√∫do
        documento_final.extend(conteudo_processado)
        
        # Limpar formata√ß√£o final
        texto_final = ''.join(documento_final)
        
        # Remover m√∫ltiplas quebras de linha (m√°ximo 2)
        texto_final = re.sub(r'\n{4,}', '\n\n\n', texto_final)
        
        # Garantir espa√ßo adequado antes de t√≠tulos
        texto_final = re.sub(r'([^\n])\n(#{1,4}\s)', r'\1\n\n\2', texto_final)
        
        # Salvar arquivo formatado
        with open(caminho_saida, 'w', encoding='utf-8') as f:
            f.write(texto_final)
            
        print(f"‚úÖ Arquivo formatado salvo: {Path(caminho_saida).name}")
        
        # Estat√≠sticas
        self.exibir_estatisticas(texto_final)
        
    def gerar_cabecalho(self, caminho_arquivo: str) -> str:
        """Gera cabe√ßalho com metadados do arquivo"""
        
        nome_arquivo = Path(caminho_arquivo).stem
        paginas_match = re.search(r'paginas-(\d+)-(\d+)', nome_arquivo)
        
        cabecalho = [
            "# Criando um Segundo C√©rebro - Tiago Forte\n",
            "*Transcri√ß√£o Formatada*\n\n"
        ]
        
        if paginas_match:
            inicio, fim = paginas_match.groups()
            total = int(fim) - int(inicio) + 1
            cabecalho.append(f"**P√°ginas**: {inicio} a {fim} (Total: {total} p√°ginas)\n\n")
            
        cabecalho.append("---\n\n")
        
        return ''.join(cabecalho)
        
    def exibir_estatisticas(self, texto: str):
        """Exibe estat√≠sticas sobre o documento processado"""
        
        linhas = texto.split('\n')
        palavras = len(texto.split())
        caracteres = len(texto)
        
        # Contar elementos estruturais
        partes = len([l for l in linhas if l.startswith('## PARTE')])
        capitulos = len([l for l in linhas if l.startswith('## Cap√≠tulo')])
        secoes = len([l for l in linhas if l.startswith('###')])
        
        print(f"\nüìä Estat√≠sticas:")
        print(f"   - Palavras: {palavras:,}")
        print(f"   - Caracteres: {caracteres:,}")
        print(f"   - Partes: {partes}")
        print(f"   - Cap√≠tulos: {capitulos}")
        print(f"   - Se√ß√µes: {secoes}")
        
    def processar_diretorio(self, diretorio: str):
        """Processa todos os arquivos de transcri√ß√£o em um diret√≥rio"""
        
        dir_path = Path(diretorio)
        arquivos_transcricao = sorted(dir_path.glob('transcricao-paginas-*.md'))
        
        if not arquivos_transcricao:
            print("‚ùå Nenhum arquivo de transcri√ß√£o encontrado")
            return
            
        print(f"\nüìö Processando {len(arquivos_transcricao)} arquivos de transcri√ß√£o...\n")
        
        # Criar diret√≥rio de sa√≠da
        output_dir = dir_path / 'formatadas-v2'
        output_dir.mkdir(exist_ok=True)
        
        for arquivo in arquivos_transcricao:
            nome_saida = arquivo.stem.replace('transcricao-', '') + '-formatado.md'
            caminho_saida = output_dir / nome_saida
            
            self.formatar_arquivo(str(arquivo), str(caminho_saida))
            print()  # Linha em branco entre arquivos
            
        print(f"‚ú® Processamento conclu√≠do!")
        print(f"üìÅ Arquivos salvos em: {output_dir}")
        

def main():
    """Fun√ß√£o principal"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description='Formata transcri√ß√µes de livros seguindo boas pr√°ticas de Markdown'
    )
    parser.add_argument(
        'caminho',
        help='Arquivo ou diret√≥rio para processar'
    )
    
    args = parser.parse_args()
    
    formatter = TranscricaoFormatterV2()
    
    if os.path.isdir(args.caminho):
        formatter.processar_diretorio(args.caminho)
    elif os.path.isfile(args.caminho):
        base_name = Path(args.caminho).stem
        output_path = Path(args.caminho).parent / f"{base_name}-formatado-v2.md"
        formatter.formatar_arquivo(args.caminho, str(output_path))
    else:
        print(f"‚ùå Caminho n√£o encontrado: {args.caminho}")
        

if __name__ == "__main__":
    main()