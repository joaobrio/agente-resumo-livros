#!/usr/bin/env python3
"""
Consolidador de Transcri√ß√µes de Livro
Combina m√∫ltiplos arquivos de transcri√ß√£o em um √∫nico documento bem formatado
"""

import re
import os
from pathlib import Path
from typing import List, Dict, Tuple
import unicodedata

class ConsolidadorLivro:
    """Consolida e formata transcri√ß√µes de livro em um √∫nico documento"""
    
    def __init__(self):
        self.estrutura = {
            'titulo': 'Criando um Segundo C√©rebro',
            'autor': 'Tiago Forte',
            'partes': {},
            'capitulos': {},
            'secoes': {}
        }
        self.conteudo_consolidado = []
        self.indice = []
        
    def processar_diretorio(self, diretorio: str) -> str:
        """Processa todos os arquivos de transcri√ß√£o e retorna o documento consolidado"""
        
        dir_path = Path(diretorio)
        arquivos = sorted(dir_path.glob('transcricao-paginas-*.md'))
        
        if not arquivos:
            raise FileNotFoundError("Nenhuma transcri√ß√£o encontrada")
            
        print(f"üìö Processando {len(arquivos)} arquivos...")
        
        # Processar cada arquivo
        for arquivo in arquivos:
            print(f"  üìÑ {arquivo.name}")
            self._processar_arquivo(arquivo)
            
        # Gerar documento final
        return self._gerar_documento()
        
    def _processar_arquivo(self, arquivo: Path):
        """Processa um arquivo de transcri√ß√£o"""
        
        with open(arquivo, 'r', encoding='utf-8') as f:
            conteudo = f.read()
            
        # Remover marcadores de p√°gina e metadados
        conteudo = self._limpar_conteudo(conteudo)
        
        # Processar estrutura
        self._extrair_estrutura(conteudo)
        
    def _limpar_conteudo(self, texto: str) -> str:
        """Limpa o conte√∫do removendo elementos desnecess√°rios"""
        
        # Remover cabe√ßalhos de p√°gina
        texto = re.sub(r'^## P√°gina \d+\n', '', texto, flags=re.MULTILINE)
        texto = re.sub(r'^---\n', '', texto, flags=re.MULTILINE)
        
        # Remover metadados do in√≠cio
        texto = re.sub(r'^# Transcri√ß√£o:.*?\n\n', '', texto)
        
        # Remover informa√ß√µes de publica√ß√£o repetitivas
        texto = re.sub(r'dLivros\s+Livros.*?Converted by convertEPub', '', texto, flags=re.DOTALL)
        texto = re.sub(r'Copyright.*?GMT Editores.*?\.com\.br', '', texto, flags=re.DOTALL)
        
        return texto
        
    def _extrair_estrutura(self, texto: str):
        """Extrai a estrutura hier√°rquica do livro"""
        
        linhas = texto.split('\n')
        buffer = []
        
        for linha in linhas:
            tipo, conteudo = self._classificar_linha(linha)
            
            if tipo == 'sumario':
                self._processar_sumario(linhas[linhas.index(linha):])
            elif tipo in ['parte', 'capitulo', 'secao']:
                if buffer:
                    self._adicionar_paragrafo(' '.join(buffer))
                    buffer = []
                self._adicionar_elemento(tipo, conteudo)
            elif tipo == 'paragrafo' and conteudo:
                buffer.append(conteudo)
            elif tipo == 'citacao':
                if buffer:
                    self._adicionar_paragrafo(' '.join(buffer))
                    buffer = []
                self._adicionar_citacao(conteudo)
            elif not linha.strip() and buffer:
                self._adicionar_paragrafo(' '.join(buffer))
                buffer = []
                
        if buffer:
            self._adicionar_paragrafo(' '.join(buffer))
            
    def _classificar_linha(self, linha: str) -> Tuple[str, str]:
        """Classifica o tipo de linha e retorna conte√∫do limpo"""
        
        linha = linha.strip()
        
        # Padr√µes de identifica√ß√£o
        if re.match(r'^SUM√ÅRIO$', linha):
            return 'sumario', linha
            
        if re.match(r'^PARTE\s+(UM|DOIS|TR√äS|QUATRO|CINCO)', linha):
            return 'parte', linha
            
        if re.match(r'^Cap√≠tulo\s+\d+$', linha):
            return 'capitulo', linha
            
        if re.match(r'^[A-Z][a-z]+.*[a-z]+$', linha) and len(linha) > 10 and len(linha) < 50:
            # Poss√≠vel t√≠tulo de se√ß√£o
            proxima_linha = self._verificar_proxima_linha(linha)
            if proxima_linha and len(proxima_linha) > 50:
                return 'secao', linha
                
        if linha.startswith('"') and '"' in linha[1:] and '‚Äì' in linha:
            return 'citacao', linha
            
        return 'paragrafo', linha
        
    def _verificar_proxima_linha(self, linha_atual: str) -> str:
        """Verifica a pr√≥xima linha para determinar contexto"""
        # Implementa√ß√£o simplificada
        return ""
        
    def _processar_sumario(self, linhas: List[str]):
        """Processa o sum√°rio do livro"""
        
        for linha in linhas[:50]:  # Limitar busca
            linha = linha.strip()
            
            # Identificar itens do sum√°rio
            if re.match(r'^\d+\s+\w+', linha):
                # Cap√≠tulo numerado
                self.indice.append(linha)
            elif re.match(r'^[A-Z]{2,}', linha) and len(linha) < 50:
                # Se√ß√£o em mai√∫sculas
                self.indice.append(linha)
                
    def _adicionar_elemento(self, tipo: str, conteudo: str):
        """Adiciona elemento estrutural ao documento"""
        
        if tipo == 'parte':
            nivel = '##'
        elif tipo == 'capitulo':
            nivel = '##'
        elif tipo == 'secao':
            nivel = '###'
        else:
            nivel = '####'
            
        self.conteudo_consolidado.append(f"\n{nivel} {conteudo}\n")
        
    def _adicionar_paragrafo(self, texto: str):
        """Adiciona par√°grafo ao documento"""
        
        texto = texto.strip()
        if len(texto) > 50:  # Ignorar par√°grafos muito curtos
            self.conteudo_consolidado.append(f"{texto}\n\n")
            
    def _adicionar_citacao(self, texto: str):
        """Adiciona cita√ß√£o formatada"""
        
        self.conteudo_consolidado.append(f"\n> {texto}\n\n")
        
    def _gerar_documento(self) -> str:
        """Gera o documento final consolidado"""
        
        documento = []
        
        # Cabe√ßalho
        documento.append(f"# {self.estrutura['titulo']}\n")
        documento.append(f"**{self.estrutura['autor']}**\n\n")
        documento.append("---\n\n")
        
        # √çndice (se houver)
        if self.indice:
            documento.append("## Sum√°rio\n\n")
            for item in self.indice[:30]:  # Limitar tamanho
                documento.append(f"- {item}\n")
            documento.append("\n---\n\n")
            
        # Conte√∫do
        documento.extend(self.conteudo_consolidado)
        
        # Limpar formata√ß√£o final
        texto_final = ''.join(documento)
        
        # Remover quebras excessivas
        texto_final = re.sub(r'\n{4,}', '\n\n\n', texto_final)
        
        # Garantir espa√ßamento antes de t√≠tulos
        texto_final = re.sub(r'([^\n])\n(#{2,4}\s)', r'\1\n\n\2', texto_final)
        
        return texto_final
        

def formatar_metodo_code(texto: str) -> str:
    """Formata especificamente o m√©todo CODE"""
    
    # Identificar e formatar o m√©todo CODE
    texto = re.sub(
        r'(C\s*[-‚Äì‚Äî]\s*Capturar)',
        r'\n**C - Capturar**',
        texto
    )
    texto = re.sub(
        r'(O\s*[-‚Äì‚Äî]\s*Organizar)',
        r'\n**O - Organizar**',
        texto
    )
    texto = re.sub(
        r'(D\s*[-‚Äì‚Äî]\s*Destilar)',
        r'\n**D - Destilar**',
        texto
    )
    texto = re.sub(
        r'(E\s*[-‚Äì‚Äî]\s*Expressar)',
        r'\n**E - Expressar**',
        texto
    )
    
    # Formatar PARA
    texto = re.sub(
        r'(P\s*[-‚Äì‚Äî]\s*Projetos)',
        r'\n**P - Projetos**',
        texto
    )
    texto = re.sub(
        r'(A\s*[-‚Äì‚Äî]\s*√Åreas)',
        r'\n**A - √Åreas**',
        texto
    )
    texto = re.sub(
        r'(R\s*[-‚Äì‚Äî]\s*Recursos)',
        r'\n**R - Recursos**',
        texto
    )
    texto = re.sub(
        r'(A\s*[-‚Äì‚Äî]\s*Arquivos)',
        r'\n**A - Arquivos**',
        texto
    )
    
    return texto


def main():
    """Fun√ß√£o principal"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description='Consolida transcri√ß√µes de livro em documento √∫nico'
    )
    parser.add_argument(
        'diretorio',
        help='Diret√≥rio com as transcri√ß√µes'
    )
    parser.add_argument(
        '-o', '--output',
        default='livro-completo.md',
        help='Arquivo de sa√≠da (padr√£o: livro-completo.md)'
    )
    
    args = parser.parse_args()
    
    consolidador = ConsolidadorLivro()
    
    try:
        print("üöÄ Iniciando consolida√ß√£o...")
        documento = consolidador.processar_diretorio(args.diretorio)
        
        # Aplicar formata√ß√µes espec√≠ficas
        documento = formatar_metodo_code(documento)
        
        # Salvar arquivo
        output_path = Path(args.diretorio) / args.output
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(documento)
            
        # Estat√≠sticas
        palavras = len(documento.split())
        caracteres = len(documento)
        
        print(f"\n‚úÖ Documento consolidado criado: {output_path}")
        print(f"üìä Estat√≠sticas:")
        print(f"   - Palavras: {palavras:,}")
        print(f"   - Caracteres: {caracteres:,}")
        
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return 1
        
    return 0


if __name__ == "__main__":
    exit(main())